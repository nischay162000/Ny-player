name: Build NY Player APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3

      # JDK setup
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Prepare Android project
      - name: Prepare Project
        run: |
          mkdir -p app/src/main/java/com/nyplayer
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values

          # settings.gradle
          echo "rootProject.name = \"NYPlayer\"\ninclude(\":app\")" > settings.gradle

          # gradle-wrapper.properties
          mkdir -p gradle/wrapper
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-8.7-bin.zip" > gradle/wrapper/gradle-wrapper.properties

          # top-level build.gradle
          cat <<'EOF' > build.gradle
          buildscript {
              repositories { google(); mavenCentral() }
              dependencies {
                  classpath "com.android.tools.build:gradle:8.3.2"
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.23"
              }
          }
          allprojects { repositories { google(); mavenCentral() } }
          EOF

          # app/build.gradle
          cat <<'EOF' > app/build.gradle
          plugins {
              id 'com.android.application'
              id 'org.jetbrains.kotlin.android'
          }

          android {
              namespace "com.nyplayer"
              compileSdk 34

              defaultConfig {
                  applicationId "com.nyplayer"
                  minSdk 23
                  targetSdk 34
                  versionCode 1
                  versionName "1.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }

              buildFeatures { compose true }
              composeOptions { kotlinCompilerExtensionVersion "1.5.10" }
              packagingOptions { resources { excludes += "/META-INF/{AL2.0,LGPL2.1}" } }
          }

          dependencies {
              implementation "androidx.core:core-ktx:1.13.1"
              implementation "androidx.activity:activity-compose:1.9.2"
              implementation platform("androidx.compose:compose-bom:2024.09.01")
              implementation "androidx.compose.ui:ui"
              implementation "androidx.compose.ui:ui-tooling-preview"
              implementation "androidx.compose.material3:material3:1.3.0"
              implementation "io.coil-kt:coil-compose:2.6.0"

              // Media3 / ExoPlayer
              implementation "androidx.media3:media3-exoplayer:1.4.1"
              implementation "androidx.media3:media3-ui:1.4.1"

              // DataStore
              implementation "androidx.datastore:datastore-preferences:1.1.1"

              // WorkManager
              implementation "androidx.work:work-runtime-ktx:2.9.1"

              // Coroutines
              implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1"

              // Accompanist
              implementation "com.google.accompanist:accompanist-systemuicontroller:0.34.0"
          }
          EOF

          # AndroidManifest.xml
          cat <<'EOF' > app/src/main/AndroidManifest.xml
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.nyplayer">

              <application
                  android:allowBackup="true"
                  android:label="NY Player"
                  android:supportsRtl="true"
                  android:theme="@style/Theme.Material3.DayNight.NoActionBar">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:configChanges="orientation|screenSize|smallestScreenSize"
                      android:resizeableActivity="true"
                      android:supportsPictureInPicture="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # MainActivity.kt (start of 3000 lines, delivered in parts)
          cat <<'EOF' > app/src/main/java/com/nyplayer/MainActivity.kt
          package com.nyplayer

          import android.annotation.SuppressLint
          import android.content.pm.ActivityInfo
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.foundation.background
          import androidx.compose.foundation.layout.*
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Alignment
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.graphics.Color
          import androidx.compose.ui.unit.dp
          import coil.compose.AsyncImage
          import kotlinx.coroutines.delay

          @SuppressLint("CustomSplashScreen")
          class MainActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
                  setContent {
                      MaterialTheme {
                          var showSplash by remember { mutableStateOf(true) }
                          if (showSplash) {
                              SplashScreen(onFinished = {
                                  showSplash = false
                                  requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_SENSOR
                              })
                          } else {
                              PlayerApp()
                          }
                      }
                  }
              }
          }

          @Composable
          fun SplashScreen(onFinished: () -> Unit) {
              LaunchedEffect(Unit) {
                  delay(2500)
                  onFinished()
              }
              Box(
                  modifier = Modifier
                      .fillMaxSize()
                      .background(Color.Black),
                  contentAlignment = Alignment.Center
              ) {
                  AsyncImage(
                      model = "https://graph.org/file/3f4620a46dcbb69d218b0-13e5a8d9424946a373.jpg",
                      contentDescription = "App Logo",
                      modifier = Modifier.size(160.dp)
                  )
              }
          }

          // ---- Part 2 (PlayerApp, ExoPlayer integration) will append here ----
          EOF

      # Gradle wrapper
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Build Debug + Release
      - name: Build APKs
        run: ./gradlew assembleDebug assembleRelease

      # Upload artifacts
      - name: Upload Debug APK
        uses: actions/upload-artifact@v3
        with:
          name: NYPlayer-Debug
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: NYPlayer-Release
          path: app/build/outputs/apk/release/app-release.apk

      # Optional Release
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            app/build/outputs/apk/debug/app-debug.apk
            app/build/outputs/apk/release/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
cat <<'EOF' >> app/src/main/java/com/nyplayer/MainActivity.kt

          import android.net.Uri
          import androidx.compose.foundation.clickable
          import androidx.compose.foundation.gestures.detectTapGestures
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.text.BasicText
          import androidx.compose.material.icons.Icons
          import androidx.compose.material.icons.filled.*
          import androidx.compose.runtime.mutableStateListOf
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.input.pointer.pointerInput
          import androidx.compose.ui.unit.sp
          import androidx.media3.common.MediaItem
          import androidx.media3.exoplayer.ExoPlayer
          import androidx.media3.ui.PlayerView
          import androidx.compose.ui.viewinterop.AndroidView
          import androidx.compose.runtime.remember

          @Composable
          fun PlayerApp() {
              val context = LocalContext.current
              val player = remember {
                  ExoPlayer.Builder(context).build()
              }
              var isPlaying by remember { mutableStateOf(false) }
              var playbackPosition by remember { mutableStateOf(0L) }
              var playbackSpeed by remember { mutableStateOf(1f) }

              // Sample video
              val videoUri = "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"

              LaunchedEffect(videoUri) {
                  val item = MediaItem.fromUri(Uri.parse(videoUri))
                  player.setMediaItem(item)
                  player.prepare()
                  player.playWhenReady = true
                  isPlaying = true
              }

              DisposableEffect(Unit) {
                  onDispose {
                      player.release()
                  }
              }

              Box(modifier = Modifier.fillMaxSize().background(Color.Black)) {
                  // AndroidView for ExoPlayer
                  AndroidView(factory = {
                      PlayerView(context).apply {
                          this.player = player
                          this.useController = false
                      }
                  }, modifier = Modifier.fillMaxSize()
                      .pointerInput(Unit) {
                          detectTapGestures(
                              onDoubleTap = {
                                  val newPos = player.currentPosition + 10000
                                  player.seekTo(newPos)
                              },
                              onLongPress = { player.playWhenReady = !player.playWhenReady }
                          )
                      }
                  )

                  // Playback controls
                  Column(
                      modifier = Modifier
                          .fillMaxWidth()
                          .align(Alignment.BottomCenter)
                          .padding(16.dp),
                      verticalArrangement = Arrangement.spacedBy(8.dp)
                  ) {
                      Row(horizontalArrangement = Arrangement.SpaceBetween,
                          modifier = Modifier.fillMaxWidth()) {
                          IconButton(onClick = { player.seekTo(player.currentPosition - 10000) }) {
                              Icon(Icons.Default.FastRewind, contentDescription = "Rewind")
                          }
                          IconButton(onClick = { player.playWhenReady = !player.playWhenReady }) {
                              Icon(
                                  if (player.isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,
                                  contentDescription = "Play/Pause"
                              )
                          }
                          IconButton(onClick = { player.seekTo(player.currentPosition + 10000) }) {
                              Icon(Icons.Default.FastForward, contentDescription = "Forward")
                          }
                      }
                      // Speed control
                      Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                          listOf(0.5f, 1f, 1.5f, 2f, 3f).forEach { speed ->
                              Text(
                                  text = "${speed}x",
                                  color = if (playbackSpeed == speed) Color.Yellow else Color.White,
                                  fontSize = 14.sp,
                                  modifier = Modifier.clickable {
                                      player.setPlaybackSpeed(speed)
                                      playbackSpeed = speed
                                  }
                              )
                          }
                      }
                  }
              }
          }

          // ---- Part 3 (Playlist, Library, Bookmarks, Subtitles) will append next ----
          EOF
cat <<'EOF' >> app/src/main/java/com/nyplayer/MainActivity.kt

          import androidx.compose.foundation.ExperimentalFoundationApi
          import androidx.compose.foundation.combinedClickable
          import androidx.compose.foundation.lazy.GridCells
          import androidx.compose.foundation.lazy.LazyVerticalGrid
          import androidx.compose.foundation.lazy.items
          import androidx.compose.foundation.text.BasicTextField
          import androidx.compose.material3.*
          import androidx.compose.runtime.mutableStateMapOf
          import androidx.compose.ui.text.input.TextFieldValue
          import androidx.media3.common.C.TrackSelectionParameters
          import androidx.media3.common.TrackGroupArray
          import androidx.media3.common.Tracks
          import androidx.media3.common.TracksInfo
          import androidx.media3.exoplayer.trackselection.DefaultTrackSelector

          // Data models
          data class VideoItem(val title: String, val uri: String)
          data class Bookmark(val timeMs: Long, val description: String)

          @OptIn(ExperimentalFoundationApi::class)
          @Composable
          fun VideoLibrary(
              videos: List<VideoItem>,
              onPlay: (VideoItem) -> Unit,
              bookmarksMap: MutableMap<String, List<Bookmark>> = mutableStateMapOf()
          ) {
              var searchQuery by remember { mutableStateOf(TextFieldValue("")) }
              Column(modifier = Modifier.fillMaxSize().padding(8.dp)) {
                  BasicTextField(
                      value = searchQuery,
                      onValueChange = { searchQuery = it },
                      modifier = Modifier
                          .fillMaxWidth()
                          .background(Color.DarkGray, shape = MaterialTheme.shapes.small)
                          .padding(8.dp)
                  )
                  Spacer(modifier = Modifier.height(8.dp))

                  val filtered = videos.filter { it.title.contains(searchQuery.text, true) }

                  LazyVerticalGrid(cells = GridCells.Fixed(2), content = {
                      items(filtered) { video ->
                          Column(
                              modifier = Modifier
                                  .padding(8.dp)
                                  .background(Color.Gray, shape = MaterialTheme.shapes.medium)
                                  .combinedClickable(
                                      onClick = { onPlay(video) },
                                      onLongClick = {
                                          val currentList = bookmarksMap.getOrDefault(video.uri, listOf())
                                          bookmarksMap[video.uri] = currentList + Bookmark(0, "New Bookmark")
                                      }
                                  )
                                  .padding(8.dp)
                          ) {
                              Text(video.title, color = Color.White)
                              val bmCount = bookmarksMap[video.uri]?.size ?: 0
                              if (bmCount > 0) {
                                  Text("Bookmarks: $bmCount", color = Color.Yellow, fontSize = 12.sp)
                              }
                          }
                      }
                  })
              }
          }

          // Subtitle + Audio Track Selection
          @Composable
          fun TrackSelector(player: ExoPlayer) {
              var tracks by remember { mutableStateOf<Tracks?>(null) }

              LaunchedEffect(player) {
                  player.addListener(object : Player.Listener {
                      override fun onTracksChanged(tracksInfo: Tracks) {
                          tracks = tracksInfo
                      }
                  })
              }

              tracks?.let { trackGroup ->
                  Column(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                      trackGroup.groups.forEachIndexed { index, group ->
                          Text("Track Group $index: ${group.mediaTrackGroup.type}")
                          group.mediaTrackGroup.forEachIndexed { tIndex, _ ->
                              Text(
                                  text = "Track $tIndex",
                                  modifier = Modifier.clickable {
                                      val parameters = DefaultTrackSelector.ParametersBuilder(player.trackSelector as DefaultTrackSelector)
                                          .setSelectionOverride(
                                              group.mediaTrackGroup.type,
                                              group.mediaTrackGroup,
                                              DefaultTrackSelector.SelectionOverride(tIndex)
                                          )
                                          .build()
                                      (player.trackSelector as DefaultTrackSelector).parameters = parameters
                                  }
                              )
                          }
                      }
                  }
              }
          }

          // ---- Part 4 (Downloads, Offline, Background playback, Casting) will follow ----
          EOF

cat <<'EOF' >> app/src/main/java/com/nyplayer/MainActivity.kt

          import androidx.work.*
          import android.content.Context
          import java.util.concurrent.TimeUnit
          import androidx.media3.exoplayer.offline.Download
          import androidx.media3.exoplayer.offline.ProgressiveDownloader
          import androidx.media3.exoplayer.offline.DownloadRequest

          // Download Manager using WorkManager
          class VideoDownloadWorker(appContext: Context, params: WorkerParameters):
              CoroutineWorker(appContext, params) {
              override suspend fun doWork(): Result {
                  val videoUrl = inputData.getString("videoUrl") ?: return Result.failure()
                  val fileName = inputData.getString("fileName") ?: "video.mp4"
                  try {
                      val request = DownloadRequest.Builder(fileName, Uri.parse(videoUrl)).build()
                      val downloader = ProgressiveDownloader(request, workDataOf())
                      downloader.download()
                      return Result.success()
                  } catch (e: Exception) {
                      e.printStackTrace()
                      return Result.failure()
                  }
              }
          }

          fun enqueueDownload(context: Context, videoUrl: String, fileName: String) {
              val workRequest = OneTimeWorkRequestBuilder<VideoDownloadWorker>()
                  .setInputData(workDataOf("videoUrl" to videoUrl, "fileName" to fileName))
                  .build()
              WorkManager.getInstance(context).enqueue(workRequest)
          }

          // Background playback with Notification
          @Composable
          fun BackgroundPlayback(player: ExoPlayer) {
              val context = LocalContext.current
              LaunchedEffect(player) {
                  // MediaSession + Notification stub (AndroidX Media3 handles most)
                  // Extend with notification controls as needed
              }
          }

          // Chromecast / DLNA / UPnP stubs
          @Composable
          fun CastingControls() {
              Column(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                  Text("Casting Stubs: Google Cast / DLNA / UPnP support coming")
                  Button(onClick = { /* Integrate Google Cast SDK */ }) {
                      Text("Cast to Device")
                  }
              }
          }

          // ---- Part 5 (Equalizer, Audio effects, Video Trim/Snapshot/GIF, Network streams) ----
          EOF
cat <<'EOF' >> app/src/main/java/com/nyplayer/MainActivity.kt

          import android.media.audiofx.BassBoost
          import android.media.audiofx.Virtualizer
          import androidx.compose.foundation.horizontalScroll
          import androidx.compose.foundation.rememberScrollState
          import androidx.compose.material3.Slider
          import androidx.compose.ui.unit.Dp
          import androidx.compose.ui.unit.dp
          import androidx.compose.foundation.layout.Arrangement
          import androidx.compose.foundation.layout.Row

          // Simple Equalizer and Audio Effects
          @Composable
          fun AudioEffects(player: ExoPlayer) {
              val context = LocalContext.current
              var bassBoostLevel by remember { mutableStateOf(0f) }
              var virtualizerLevel by remember { mutableStateOf(0f) }

              val bassBoost = remember {
                  BassBoost(0, player.audioSessionId).apply { setEnabled(true) }
              }
              val virtualizer = remember {
                  Virtualizer(0, player.audioSessionId).apply { setEnabled(true) }
              }

              Column(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                  Text("Bass Boost")
                  Slider(
                      value = bassBoostLevel,
                      onValueChange = {
                          bassBoostLevel = it
                          bassBoost.setStrength((it * 1000).toInt())
                      },
                      valueRange = 0f..1f
                  )
                  Text("Virtualizer")
                  Slider(
                      value = virtualizerLevel,
                      onValueChange = {
                          virtualizerLevel = it
                          virtualizer.setStrength((it * 1000).toInt())
                      },
                      valueRange = 0f..1f
                  )
              }
          }

          // Video trimming / snapshot / GIF export stubs
          @Composable
          fun VideoTools(player: ExoPlayer) {
              Column(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                  Text("Video Tools (Trim / Snapshot / GIF Export)")
                  Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                      Button(onClick = { /* Implement Trim */ }) { Text("Trim") }
                      Button(onClick = { /* Implement Snapshot */ }) { Text("Snapshot") }
                      Button(onClick = { /* Implement GIF Export */ }) { Text("GIF") }
                  }
              }
          }

          // Network stream quality selector
          @Composable
          fun NetworkQualitySelector() {
              val qualities = listOf("Auto", "1080p", "720p", "480p", "360p")
              var selected by remember { mutableStateOf("Auto") }

              Row(modifier = Modifier.horizontalScroll(rememberScrollState()),
                  horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                  qualities.forEach { q ->
                      Button(onClick = { selected = q }) {
                          Text(q)
                      }
                  }
              }
          }

          // ---- Part 6 (Settings, Themes, Gestures, Cache, Analytics, Privacy) ----
          EOF
cat <<'EOF' >> app/src/main/java/com/nyplayer/MainActivity.kt

          import androidx.compose.foundation.switch
          import androidx.datastore.preferences.core.booleanPreferencesKey
          import androidx.datastore.preferences.core.edit
          import androidx.datastore.preferences.preferencesDataStore
          import kotlinx.coroutines.flow.collect
          import kotlinx.coroutines.launch
          import androidx.compose.material3.Switch
          import androidx.compose.runtime.getValue
          import androidx.compose.runtime.setValue

          val Context.dataStore by preferencesDataStore(name = "settings")

          @Composable
          fun SettingsScreen() {
              val context = LocalContext.current
              val scope = rememberCoroutineScope()

              var darkTheme by remember { mutableStateOf(false) }
              var gesturesEnabled by remember { mutableStateOf(true) }
              var analyticsEnabled by remember { mutableStateOf(false) }

              Column(modifier = Modifier.fillMaxSize().padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
                  Row(horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {
                      Text("Dark Theme")
                      Switch(checked = darkTheme, onCheckedChange = {
                          darkTheme = it
                          // Save to DataStore
                          scope.launch { context.dataStore.edit { it[booleanPreferencesKey("darkTheme")] = it } }
                      })
                  }

                  Row(horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {
                      Text("Gestures Enabled")
                      Switch(checked = gesturesEnabled, onCheckedChange = { gesturesEnabled = it })
                  }

                  Row(horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {
                      Text("Analytics (Opt-in)")
                      Switch(checked = analyticsEnabled, onCheckedChange = { analyticsEnabled = it })
                  }

                  Button(onClick = { /* Clear Cache */ }) { Text("Clear Cache") }
                  Button(onClick = { /* Reset History */ }) { Text("Clear History") }
              }
          }

          // ---- End of MainActivity.kt ----
          EOF

    
