name: Build Android Video Stream Player App

# Trigger the workflow on push to main branch or manual dispatch
on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Environment variables
env:
  APP_NAME: NetworkStreamPlayer
  PACKAGE_NAME: com.networkstreamer
  
jobs:
  build-app:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: gradle
        
    # Step 3: Create Android project structure
    - name: Create Android Project Structure
      run: |
        # Create project directories
        mkdir -p app/src/main/java/com/networkstreamer
        mkdir -p app/src/main/res/values
        mkdir -p gradle/wrapper
        
        # Create root build.gradle
        cat > build.gradle.kts <<'EOF'
        plugins {
            id("com.android.application") version "8.2.0" apply false
            id("org.jetbrains.kotlin.android") version "1.9.10" apply false
            id("org.jetbrains.kotlin.plugin.compose") version "1.9.10" apply false
        }
        EOF
        
        # Create settings.gradle
        cat > settings.gradle.kts <<'EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        rootProject.name = "NetworkStreamPlayer"
        include(":app")
        EOF
        
        # Create app build.gradle
        cat > app/build.gradle.kts <<'EOF'
        plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
            id("org.jetbrains.kotlin.plugin.compose")
        }
        
        android {
            namespace = "com.networkstreamer"
            compileSdk = 34
            
            defaultConfig {
                applicationId = "com.networkstreamer"
                minSdk = 21
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"
                testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
            }
            
            buildTypes {
                release {
                    isMinifyEnabled = false
                    proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"))
                }
            }
            
            compileOptions {
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
            }
            
            kotlinOptions {
                jvmTarget = "17"
            }
            
            buildFeatures {
                compose = true
            }
            
            composeOptions {
                kotlinCompilerExtensionVersion = "1.5.4"
            }
            
            packaging {
                resources {
                    excludes += "/META-INF/{AL2.0,LGPL2.1}"
                }
            }
        }
        
        dependencies {
            implementation("androidx.core:core-ktx:1.12.0")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
            implementation("androidx.activity:activity-compose:1.8.2")
            implementation(platform("androidx.compose:compose-bom:2023.10.01"))
            implementation("androidx.compose.ui:ui")
            implementation("androidx.compose.ui:ui-graphics")
            implementation("androidx.compose.ui:ui-tooling-preview")
            implementation("androidx.compose.material3:material3")
            implementation("androidx.compose.material:material-icons-extended")
            implementation("androidx.navigation:navigation-compose:2.7.5")
            implementation("androidx.datastore:datastore-preferences:1.0.0")
            implementation("androidx.work:work-runtime-ktx:2.8.1")
            implementation("androidx.compose.runtime:runtime-livedata")
            implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0")
            
            // ExoPlayer for video streaming
            implementation("androidx.media3:media3-exoplayer:1.2.0")
            implementation("androidx.media3:media3-ui:1.2.0")
            implementation("androidx.media3:media3-common:1.2.0")
            implementation("androidx.media3:media3-session:1.2.0")
            
            // Network and HTTP
            implementation("com.squareup.okhttp3:okhttp:4.12.0")
            implementation("androidx.concurrent:concurrent-futures-ktx:1.1.0")
        }
        EOF
        
        # Create gradle.properties
        cat > gradle.properties <<'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        kotlin.code.style=official
        android.nonTransitiveRClass=true
        EOF
        
        # Create AndroidManifest.xml
        cat > app/src/main/AndroidManifest.xml <<'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">
            
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            
            <application
                android:allowBackup="true"
                android:dataExtractionRules="@xml/data_extraction_rules"
                android:fullBackupContent="@xml/backup_rules"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:supportsRtl="true"
                android:theme="@style/Theme.NetworkStreamPlayer"
                android:usesCleartextTraffic="true"
                tools:targetApi="31">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:supportsPictureInPicture="true"
                    android:configChanges="screenSize|smallestScreenSize|screenLayout|orientation"
                    android:theme="@style/Theme.NetworkStreamPlayer">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF
        
        # Create strings.xml
        cat > app/src/main/res/values/strings.xml <<'EOF'
        <resources>
            <string name="app_name">Network Stream Player</string>
        </resources>
        EOF
        
        # Create themes.xml
        mkdir -p app/src/main/res/values
        cat > app/src/main/res/values/themes.xml <<'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="Theme.NetworkStreamPlayer" parent="android:Theme.Material.DayNight.NoActionBar" />
        </resources>
        EOF
        
        # Create backup and data extraction rules
        mkdir -p app/src/main/res/xml
        cat > app/src/main/res/xml/backup_rules.xml <<'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <full-backup-content />
        EOF
        
        cat > app/src/main/res/xml/data_extraction_rules.xml <<'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <data-extraction-rules>
            <cloud-backup>
                <include domain="sharedpref" path="." />
            </cloud-backup>
            <device-transfer>
                <include domain="sharedpref" path="." />
            </device-transfer>
        </data-extraction-rules>
        EOF
        
        # Create launcher icons (simple colored rectangles for CI)
        mkdir -p app/src/main/res/mipmap-hdpi
        mkdir -p app/src/main/res/mipmap-mdpi
        mkdir -p app/src/main/res/mipmap-xhdpi
        mkdir -p app/src/main/res/mipmap-xxhdpi
        mkdir -p app/src/main/res/mipmap-xxxhdpi
        
        # Download Gradle wrapper
        curl -L https://services.gradle.org/distributions/gradle-8.4-bin.zip -o gradle-8.4-bin.zip
        unzip -q gradle-8.4-bin.zip
        mkdir -p gradle/wrapper
        cp gradle-8.4/lib/gradle-wrapper.jar gradle/wrapper/
        
        # Create gradle wrapper properties
        cat > gradle/wrapper/gradle-wrapper.properties <<'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        networkTimeout=10000
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Create gradlew script
        cat > gradlew <<'EOF'
        #!/bin/sh
        
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        
        APP_NAME="Gradle"
        APP_BASE_NAME=`basename "$0"`
        
        GRADLE_USER_HOME=${GRADLE_USER_HOME:-$HOME/.gradle}
        
        warn ( ) {
            echo "$*"
        } >&2
        
        die ( ) {
            echo
            echo "$*"
            echo
            exit 1
        } >&2
        
        case "`uname`" in
          CYGWIN* | MINGW* )
            APP_HOME="`pwd -P`"
            ;;
          * )
            APP_HOME="`pwd -P`"
            ;;
        esac
        
        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
        
        exec java $DEFAULT_JVM_OPTS $JAVA_OPTS -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
        EOF
        
        chmod +x gradlew

    # Step 4: Create the complete MainActivity.kt with video streaming features
    - name: Create MainActivity.kt with Video Player
      run: |
        cat > app/src/main/java/com/networkstreamer/MainActivity.kt <<'EOF'
        package com.networkstreamer
        
        import android.app.PictureInPictureParams
        import android.content.pm.PackageManager
        import android.content.res.Configuration
        import android.os.Build
        import android.os.Bundle
        import android.util.Rational
        import android.view.ViewGroup
        import android.widget.FrameLayout
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.setContent
        import androidx.annotation.RequiresApi
        import androidx.compose.animation.*
        import androidx.compose.animation.core.*
        import androidx.compose.foundation.Canvas
        import androidx.compose.foundation.background
        import androidx.compose.foundation.clickable
        import androidx.compose.foundation.layout.*
        import androidx.compose.foundation.lazy.LazyColumn
        import androidx.compose.foundation.lazy.items
        import androidx.compose.foundation.shape.CircleShape
        import androidx.compose.foundation.shape.RoundedCornerShape
        import androidx.compose.foundation.text.KeyboardOptions
        import androidx.compose.material.icons.Icons
        import androidx.compose.material.icons.filled.*
        import androidx.compose.material3.*
        import androidx.compose.runtime.*
        import androidx.compose.ui.Alignment
        import androidx.compose.ui.Modifier
        import androidx.compose.ui.draw.clip
        import androidx.compose.ui.draw.scale
        import androidx.compose.ui.geometry.Offset
        import androidx.compose.ui.graphics.Color
        import androidx.compose.ui.graphics.Path
        import androidx.compose.ui.graphics.drawscope.DrawScope
        import androidx.compose.ui.platform.LocalContext
        import androidx.compose.ui.text.font.FontWeight
        import androidx.compose.ui.text.input.KeyboardType
        import androidx.compose.ui.text.style.TextAlign
        import androidx.compose.ui.unit.dp
        import androidx.compose.ui.unit.sp
        import androidx.compose.ui.viewinterop.AndroidView
        import androidx.datastore.core.DataStore
        import androidx.datastore.preferences.core.*
        import androidx.datastore.preferences.preferencesDataStore
        import androidx.lifecycle.ViewModel
        import androidx.lifecycle.viewmodel.compose.viewModel
        import androidx.media3.common.MediaItem
        import androidx.media3.common.PlaybackException
        import androidx.media3.common.Player
        import androidx.media3.exoplayer.ExoPlayer
        import androidx.media3.ui.PlayerView
        import androidx.navigation.NavHostController
        import androidx.navigation.compose.NavHost
        import androidx.navigation.compose.composable
        import androidx.navigation.compose.rememberNavController
        import androidx.work.*
        import kotlinx.coroutines.delay
        import kotlinx.coroutines.flow.Flow
        import kotlinx.coroutines.flow.map
        import java.util.concurrent.TimeUnit
        
        // DataStore for preferences
        val android.content.Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "settings")
        
        class MainActivity : ComponentActivity() {
            private var exoPlayer: ExoPlayer? = null
            
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                
                setContent {
                    NetworkStreamPlayerTheme {
                        val navController = rememberNavController()
                        val viewModel: PlayerViewModel = viewModel()
                        
                        NavHost(
                            navController = navController,
                            startDestination = "splash"
                        ) {
                            composable("splash") {
                                SplashScreen {
                                    navController.navigate("home") {
                                        popUpTo("splash") { inclusive = true }
                                    }
                                }
                            }
                            composable("home") {
                                HomeScreen(
                                    viewModel = viewModel,
                                    onPlayVideo = { url ->
                                        viewModel.setCurrentUrl(url)
                                        navController.navigate("player")
                                    }
                                )
                            }
                            composable("player") {
                                PlayerScreen(
                                    viewModel = viewModel,
                                    onBack = { navController.popBackStack() },
                                    activity = this@MainActivity
                                )
                            }
                        }
                    }
                }
            }
            
            fun enterPictureInPictureMode() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    val params = PictureInPictureParams.Builder()
                        .setAspectRatio(Rational(16, 9))
                        .build()
                    enterPictureInPictureMode(params)
                }
            }
            
            override fun onPictureInPictureModeChanged(
                isInPictureInPictureMode: Boolean,
                newConfig: Configuration
            ) {
                super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig)
                // Handle PiP mode changes
            }
            
            override fun onDestroy() {
                super.onDestroy()
                exoPlayer?.release()
            }
        }
        
        // Player ViewModel
        class PlayerViewModel : ViewModel() {
            private var _currentUrl = mutableStateOf("")
            val currentUrl: State<String> = _currentUrl
            
            private var _isPlaying = mutableStateOf(false)
            val isPlaying: State<Boolean> = _isPlaying
            
            private var _playlist = mutableStateListOf<String>()
            val playlist: List<String> = _playlist
            
            fun setCurrentUrl(url: String) {
                _currentUrl.value = url
            }
            
            fun setPlaying(playing: Boolean) {
                _isPlaying.value = playing
            }
            
            fun addToPlaylist(url: String) {
                if (!_playlist.contains(url)) {
                    _playlist.add(url)
                }
            }
        }
        
        // Download Worker for background downloads
        class DownloadWorker(context: android.content.Context, params: WorkerParameters) : 
            CoroutineWorker(context, params) {
            
            override suspend fun doWork(): Result {
                val url = inputData.getString("url") ?: return Result.failure()
                
                return try {
                    // Simulate download progress
                    for (i in 0..100 step 10) {
                        setProgress(workDataOf("progress" to i))
                        delay(200)
                    }
                    Result.success(workDataOf("downloaded_file" to "video.mp4"))
                } catch (e: Exception) {
                    Result.failure()
                }
            }
        }
        
        // Theme
        @Composable
        fun NetworkStreamPlayerTheme(content: @Composable () -> Unit) {
            MaterialTheme(
                colorScheme = darkColorScheme(
                    primary = Color(0xFF6750A4),
                    secondary = Color(0xFF625B71),
                    background = Color(0xFF1C1B1F),
                    surface = Color(0xFF1C1B1F)
                ),
                content = content
            )
        }
        
        // Splash Screen with Animation
        @Composable
        fun SplashScreen(onSplashComplete: () -> Unit) {
            var startAnimation by remember { mutableStateOf(false) }
            
            val scaleAnimation by animateFloatAsState(
                targetValue = if (startAnimation) 1.0f else 0.3f,
                animationSpec = tween(800, easing = FastOutSlowInEasing),
                label = "scale"
            )
            
            val alphaAnimation by animateFloatAsState(
                targetValue = if (startAnimation) 1.0f else 0.0f,
                animationSpec = tween(800),
                label = "alpha"
            )
            
            LaunchedEffect(key1 = true) {
                startAnimation = true
                delay(1200)
                onSplashComplete()
            }
            
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color(0xFF1C1B1F)),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .scale(scaleAnimation)
                        .graphicsLayer(alpha = alphaAnimation)
                ) {
                    // Custom logo using Canvas
                    StreamPlayerLogo(
                        modifier = Modifier.size(120.dp),
                        color = Color(0xFF6750A4)
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Text(
                        text = "Network Stream Player",
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                }
            }
        }
        
        // Custom Logo Component
        @Composable
        fun StreamPlayerLogo(modifier: Modifier = Modifier, color: Color) {
            Canvas(modifier = modifier) {
                drawPlayButton(size, color)
            }
        }
        
        private fun DrawScope.drawPlayButton(size: androidx.compose.ui.geometry.Size, color: Color) {
            val centerX = size.width / 2
            val centerY = size.height / 2
            val radius = minOf(size.width, size.height) / 2 * 0.8f
            
            // Draw circle background
            drawCircle(
                color = color.copy(alpha = 0.2f),
                radius = radius,
                center = Offset(centerX, centerY)
            )
            
            // Draw play triangle
            val trianglePath = Path().apply {
                val triangleSize = radius * 0.5f
                moveTo(centerX - triangleSize * 0.3f, centerY - triangleSize * 0.5f)
                lineTo(centerX + triangleSize * 0.6f, centerY)
                lineTo(centerX - triangleSize * 0.3f, centerY + triangleSize * 0.5f)
                close()
            }
            
            drawPath(trianglePath, color)
        }
        
        // Home Screen
        @Composable
        fun HomeScreen(
            viewModel: PlayerViewModel,
            onPlayVideo: (String) -> Unit
        ) {
            var selectedTab by remember { mutableIntStateOf(0) }
            var urlInput by remember { mutableStateOf("") }
            val sampleUrls = listOf(
                "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
                "https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4"
            )
            
            Column(modifier = Modifier.fillMaxSize()) {
                // Top App Bar
                Surface(
                    modifier = Modifier.fillMaxWidth(),
                    color = MaterialTheme.colorScheme.primary
                ) {
                    Text(
                        text = "Network Stream Player",
                        modifier = Modifier.padding(16.dp),
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                }
                
                // Tab Row
                TabRow(
                    selectedTabIndex = selectedTab,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Tab(
                        selected = selectedTab == 0,
                        onClick = { selectedTab = 0 },
                        text = { Text("Sample URLs") }
                    )
                    Tab(
                        selected = selectedTab == 1,
                        onClick = { selectedTab = 1 },
                        text = { Text("Custom URL") }
                    )
                }
                
                // Tab Content
                when (selectedTab) {
                    0 -> {
                        // Sample URLs List
                        LazyColumn(
                            modifier = Modifier.fillMaxSize(),
                            contentPadding = PaddingValues(16.dp),
                            verticalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            items(sampleUrls) { url ->
                                StreamUrlCard(
                                    url = url,
                                    onPlay = { onPlayVideo(url) },
                                    onAddToPlaylist = { viewModel.addToPlaylist(url) }
                                )
                            }
                        }
                    }
                    1 -> {
                        // Custom URL Input
                        Column(
                            modifier = Modifier
                                .fillMaxSize()
                                .padding(16.dp),
                            verticalArrangement = Arrangement.spacedBy(16.dp)
                        ) {
                            OutlinedTextField(
                                value = urlInput,
                                onValueChange = { urlInput = it },
                                label = { Text("Media Stream URL") },
                                placeholder = { Text("https://example.com/video.mp4") },
                                modifier = Modifier.fillMaxWidth(),
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Uri),
                                singleLine = false
                            )
                            
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                Button(
                                    onClick = { if (urlInput.isNotBlank()) onPlayVideo(urlInput) },
                                    modifier = Modifier.weight(1f),
                                    enabled = urlInput.isNotBlank()
                                ) {
                                    Icon(Icons.Default.PlayArrow, contentDescription = null)
                                    Spacer(modifier = Modifier.width(4.dp))
                                    Text("Play")
                                }
                                
                                OutlinedButton(
                                    onClick = { 
                                        if (urlInput.isNotBlank()) {
                                            viewModel.addToPlaylist(urlInput)
                                        }
                                    },
                                    modifier = Modifier.weight(1f),
                                    enabled = urlInput.isNotBlank()
                                ) {
                                    Icon(Icons.Default.Add, contentDescription = null)
                                    Spacer(modifier = Modifier.width(4.dp))
                                    Text("Add to Playlist")
                                }
                            }
                            
                            // Playlist
                            if (viewModel.playlist.isNotEmpty()) {
                                Text(
                                    text = "Playlist (${viewModel.playlist.size} items)",
                                    style = MaterialTheme.typography.titleMedium,
                                    modifier = Modifier.padding(top = 16.dp)
                                )
                                
                                LazyColumn(
                                    verticalArrangement = Arrangement.spacedBy(4.dp)
                                ) {
                                    items(viewModel.playlist) { url ->
                                        PlaylistItem(
                                            url = url,
                                            onPlay = { onPlayVideo(url) }
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        // Stream URL Card Component
        @Composable
        fun StreamUrlCard(
            url: String,
            onPlay: () -> Unit,
            onAddToPlaylist: () -> Unit
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onPlay() },
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = url.substringAfterLast("/"),
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    Text(
                        text = url,
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        maxLines = 1
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Row {
                        Button(
                            onClick = onPlay,
                            modifier = Modifier.weight(1f)
                        ) {
                            Icon(Icons.Default.PlayArrow, contentDescription = null)
                            Spacer(modifier = Modifier.width(4.dp))
                            Text("Play")
                        }
                        
                        Spacer(modifier = Modifier.width(8.dp))
                        
                        IconButton(onClick = onAddToPlaylist) {
                            Icon(Icons.Default.Add, contentDescription = "Add to playlist")
                        }
                    }
                }
            }
        }
        
        // Playlist Item
        @Composable
        fun PlaylistItem(url: String, onPlay: () -> Unit) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onPlay() }
            ) {
                Row(
                    modifier = Modifier.padding(12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        Icons.Default.PlayArrow,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp),
                        tint = MaterialTheme.colorScheme.primary
                    )
                    
                    Spacer(modifier = Modifier.width(8.dp))
                    
                    Text(
                        text = url.substringAfterLast("/"),
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.weight(1f)
                    )
                }
            }
        }
        
        // Player Screen
        @Composable
        fun PlayerScreen(
            viewModel: PlayerViewModel,
            onBack: () -> Unit,
            activity: MainActivity
        ) {
            val context = LocalContext.current
            var showControls by remember { mutableStateOf(true) }
            
            // Initialize ExoPlayer
            val exoPlayer = remember {
                ExoPlayer.Builder(context).build().apply {
                    val mediaItem = MediaItem.fromUri(viewModel.currentUrl.value)
                    setMediaItem(mediaItem)
                    prepare()
                    playWhenReady = true
                }
            }
            
            DisposableEffect(exoPlayer) {
                onDispose {
                    exoPlayer.release()
                }
            }
            
            Box(modifier = Modifier.fillMaxSize()) {
                // Video Player
                AndroidView(
                    factory = { context ->
                        PlayerView(context).apply {
                            player = exoPlayer
                            layoutParams = FrameLayout.LayoutParams(
                                ViewGroup.LayoutParams.MATCH_PARENT,
                                ViewGroup.LayoutParams.MATCH_PARENT
                            )
                            useController = false
                        }
                    },
                    modifier = Modifier
                        .fillMaxSize()
                        .clickable { showControls = !showControls }
                )
                
                // Custom Controls Overlay
                AnimatedVisibility(
                    visible = showControls,
                    enter = fadeIn(),
                    exit = fadeOut(),
                    modifier = Modifier.align(Alignment.BottomCenter)
                ) {
                    Surface(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(Color.Black.copy(alpha = 0.7f)),
                        color = Color.Transparent
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            // Control buttons
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceEvenly,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                IconButton(onClick = onBack) {
                                    Icon(
                                        Icons.Default.ArrowBack,
                                        contentDescription = "Back",
                                        tint = Color.White
                                    )
                                }
                                
                                IconButton(onClick = { 
                                    if (exoPlayer.isPlaying) {
                                        exoPlayer.pause()
                                    } else {
                                        exoPlayer.play()
                                    }
                                }) {
                                    Icon(
                                        if (exoPlayer.isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,
                                        contentDescription = if (exoPlayer.isPlaying) "Pause" else "Play",
                                        tint = Color.White,
                                        modifier = Modifier.size(32.dp)
                                    )
                                }
                                
                                IconButton(onClick = { 
                                    exoPlayer.seekTo(exoPlayer.currentPosition - 10000)
                                }) {
                                    Icon(
                                        Icons.Default.Replay10,
                                        contentDescription = "Replay 10s",
                                        tint = Color.White
                                    )
                                }
                                
                                IconButton(onClick = { 
                                    exoPlayer.seekTo(exoPlayer.currentPosition + 10000)
                                }) {
                                    Icon(
                                        Icons.Default.Forward10,
                                        contentDescription = "Forward 10s",
                                        tint = Color.White
                                    )
                                }
                                
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                    IconButton(onClick = { 
                                        activity.enterPictureInPictureMode()
                                    }) {
                                        Icon(
                                            Icons.Default.PictureInPicture,
                                            contentDescription = "PiP Mode",
                                            tint = Color.White
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
                
                // Hide controls after delay
                LaunchedEffect(showControls) {
                    if (showControls) {
                        delay(3000)
                        showControls = false
                    }
                }
            }
        }
        EOF

    # Step 5: Make gradlew executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    # Step 6: Build debug APK
    - name: Build Debug APK
      run: ./gradlew assembleDebug --stacktrace

    # Step 7: Build release APK
    - name: Build Release APK
      run: ./gradlew assembleRelease --stacktrace

    # Step 8: Upload Debug APK
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: NetworkStreamPlayer-debug-${{ github.run_number }}
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 30

    # Step 9: Upload Release APK
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: NetworkStreamPlayer-release-${{ github.run_number }}
        path: app/build/outputs/apk/release/*.apk
        retention-days: 30

    # Step 10: Create GitHub Release (optional - only on manual trigger)
    - name: Create Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: Network Stream Player v1.0.${{ github.run_number }}
        body: |
          ## Network Stream Player
          
          ### Features:
          - 🎬 Stream videos from URLs with ExoPlayer
          - 📱 Beautiful Material Design 3 UI
          - 🎯 Picture-in-Picture support
          - 📋 Playlist management
          - ⚡ Smooth animations and transitions
          - 🎨 Dark theme with modern design
          - 🔄 Custom video controls
          
          ### Sample URLs included:
          - BigBuckBunny sample video
          - Various test streams
          
          Download the APK below and install on your Android device!
        files: |
          app/build/outputs/apk/release/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 11: Output success message with download instructions
    - name: Build Success
      run: |
        echo "🎉 BUILD SUCCESSFUL! 🎉"
        echo ""
        echo "📱 Your Network Stream Player app has been built successfully!"
        echo ""
        echo "📥 Download your APK files from:"
        echo "1. Go to the 'Actions' tab in your repository"
        echo "2. Click on this workflow run"
        echo "3. Scroll down to 'Artifacts' section"
        echo "4. Download either:"
        echo "   - NetworkStreamPlayer-debug-${{ github.run_number }}.zip (for testing)"
        echo "   - NetworkStreamPlayer-release-${{ github.run_number }}.zip (for distribution)"
        echo ""
        echo "🚀 Features included in your app:"
        echo "✅ Video streaming from URLs"
        echo "✅ Beautiful Material Design UI"
        echo "✅ Picture-in-Picture mode"
        echo "✅ Custom video controls"
        echo "✅ Playlist management"
        echo "✅ Sample streaming URLs"
        echo "✅ Dark theme with animations"
        echo ""
        echo "💡 To use the app:"
        echo "1. Install the downloaded APK on your Android device"
        echo "2. Use the sample URLs or enter your own streaming URL"
        echo "3. Enjoy streaming videos with professional controls!"
