name: Build NY Player APK

# Trigger the workflow on push to main branch or manual dispatch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 17 (required for latest Android development)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Create Android project structure
    - name: Create Android project structure
      run: |
        # Create directory structure
        mkdir -p app/src/main/java/com/nyplayer
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/res/drawable
        mkdir -p app/src/main/res/mipmap-hdpi
        mkdir -p app/src/main/res/mipmap-mdpi
        mkdir -p app/src/main/res/mipmap-xhdpi
        mkdir -p app/src/main/res/mipmap-xxhdpi
        mkdir -p app/src/main/res/mipmap-xxxhdpi
        mkdir -p app/src/main/res/xml
        mkdir -p gradle/wrapper

    # Step 4: Create gradle-wrapper.properties
    - name: Create gradle-wrapper.properties
      run: |
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        networkTimeout=10000
        validateDistributionUrl=true
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF

    # Step 5: Create settings.gradle
    - name: Create settings.gradle
      run: |
        cat > settings.gradle << 'EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        rootProject.name = "NY Player"
        include ':app'
        EOF

    # Step 6: Create root build.gradle
    - name: Create root build.gradle
      run: |
        cat > build.gradle << 'EOF'
        plugins {
            id 'com.android.application' version '8.1.4' apply false
            id 'org.jetbrains.kotlin.android' version '1.9.10' apply false
        }
        EOF

    # Step 7: Create app build.gradle
    - name: Create app build.gradle
      run: |
        cat > app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
            id 'org.jetbrains.kotlin.android'
        }

        android {
            namespace 'com.nyplayer'
            compileSdk 34

            defaultConfig {
                applicationId "com.nyplayer"
                minSdk 24
                targetSdk 34
                versionCode 1
                versionName "1.0"
                
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                vectorDrawables {
                    useSupportLibrary true
                }
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            
            kotlinOptions {
                jvmTarget = '17'
            }
            
            buildFeatures {
                compose true
            }
            
            composeOptions {
                kotlinCompilerExtensionVersion '1.5.4'
            }
            
            packaging {
                resources {
                    excludes += '/META-INF/{AL2.0,LGPL2.1}'
                }
            }
        }

        dependencies {
            implementation 'androidx.core:core-ktx:1.12.0'
            implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
            implementation 'androidx.activity:activity-compose:1.8.2'
            implementation platform('androidx.compose:compose-bom:2023.10.01')
            implementation 'androidx.compose.ui:ui'
            implementation 'androidx.compose.ui:ui-graphics'
            implementation 'androidx.compose.ui:ui-tooling-preview'
            implementation 'androidx.compose.material3:material3'
            implementation 'androidx.compose.material:material-icons-extended'
            
            // ExoPlayer / Media3
            implementation 'androidx.media3:media3-exoplayer:1.2.0'
            implementation 'androidx.media3:media3-ui:1.2.0'
            implementation 'androidx.media3:media3-common:1.2.0'
            
            // Navigation
            implementation 'androidx.navigation:navigation-compose:2.7.5'
            
            // ViewModel
            implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
            
            // Permissions
            implementation 'com.google.accompanist:accompanist-permissions:0.32.0'
            
            // Image loading
            implementation 'io.coil-kt:coil-compose:2.5.0'
        }
        EOF

    # Step 8: Create AndroidManifest.xml
    - name: Create AndroidManifest.xml
      run: |
        cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">

            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
            <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
            <uses-permission android:name="android.permission.INTERNET" />
            
            <uses-feature
                android:name="android.software.picture_in_picture"
                android:required="false" />

            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="NY Player"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:theme="@android:style/Theme.Material.DayNight.NoActionBar"
                tools:targetApi="31">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:supportsPictureInPicture="true"
                    android:configChanges="screenSize|smallestScreenSize|screenLayout|orientation"
                    android:theme="@android:style/Theme.Material.DayNight.NoActionBar">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                    
                    <intent-filter>
                        <action android:name="android.intent.action.VIEW" />
                        <category android:name="android.intent.category.DEFAULT" />
                        <data android:mimeType="video/*" />
                    </intent-filter>
                    <intent-filter>
                        <action android:name="android.intent.action.VIEW" />
                        <category android:name="android.intent.category.DEFAULT" />
                        <data android:mimeType="audio/*" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF

    # Step 9: Create app resources
    - name: Create app resources
      run: |
        # Create strings.xml
        cat > app/src/main/res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">NY Player</string>
        </resources>
        EOF
        
        # Create colors.xml
        cat > app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="purple_200">#FFBB86FC</color>
            <color name="purple_500">#FF6200EE</color>
            <color name="purple_700">#FF3700B3</color>
            <color name="teal_200">#FF03DAC5</color>
            <color name="teal_700">#FF018786</color>
            <color name="black">#FF000000</color>
            <color name="white">#FFFFFFFF</color>
        </resources>
        EOF
        
        # Create simple app icons (drawable)
        cat > app/src/main/res/drawable/ic_launcher_foreground.xml << 'EOF'
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="108dp"
            android:height="108dp"
            android:viewportWidth="108"
            android:viewportHeight="108">
            <path
                android:fillColor="#FF6200EE"
                android:pathData="M44,32L64,54L44,76L24,54Z"/>
        </vector>
        EOF
        
        # Create launcher icon XML files
        for dpi in hdpi mdpi xhdpi xxhdpi xxxhdpi; do
          cat > app/src/main/res/mipmap-${dpi}/ic_launcher.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@color/purple_500"/>
            <foreground android:drawable="@drawable/ic_launcher_foreground"/>
        </adaptive-icon>
        EOF
          
          cat > app/src/main/res/mipmap-${dpi}/ic_launcher_round.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@color/purple_500"/>
            <foreground android:drawable="@drawable/ic_launcher_foreground"/>
        </adaptive-icon>
        EOF
        done

    # Step 10: Create Gradle wrapper files
    - name: Create gradlew script and download wrapper jar
      run: |
        # Download gradle wrapper jar
        curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.4.0/gradle/wrapper/gradle-wrapper.jar
        
        # Create gradlew script
        cat > gradlew << 'EOF'
        #!/bin/sh
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        APP_BASE_NAME=${0##*/}
        APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit
        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                JAVACMD=$JAVA_HOME/jre/sh/java
            else
                JAVACMD=$JAVA_HOME/bin/java
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
            fi
        else
            JAVACMD=java
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
        fi
        exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \
                "-Dorg.gradle.appname=$APP_BASE_NAME" \
                -classpath "$CLASSPATH" \
                org.gradle.wrapper.GradleWrapperMain "$@"
        EOF

    # Step 11: Make gradlew executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    # Step 12: Create simplified MainActivity.kt
    - name: Create MainActivity.kt
      run: |
        cat > app/src/main/java/com/nyplayer/MainActivity.kt << 'EOF'
        package com.nyplayer

        import android.Manifest
        import android.annotation.SuppressLint
        import android.app.PictureInPictureParams
        import android.content.Intent
        import android.net.Uri
        import android.os.Build
        import android.os.Bundle
        import android.util.Rational
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.rememberLauncherForActivityResult
        import androidx.activity.compose.setContent
        import androidx.activity.result.contract.ActivityResultContracts
        import androidx.compose.animation.core.*
        import androidx.compose.foundation.*
        import androidx.compose.foundation.layout.*
        import androidx.compose.foundation.lazy.LazyColumn
        import androidx.compose.foundation.lazy.items
        import androidx.compose.foundation.shape.CircleShape
        import androidx.compose.foundation.shape.RoundedCornerShape
        import androidx.compose.material.icons.Icons
        import androidx.compose.material.icons.filled.*
        import androidx.compose.material3.*
        import androidx.compose.runtime.*
        import androidx.compose.ui.Alignment
        import androidx.compose.ui.Modifier
        import androidx.compose.ui.draw.clip
        import androidx.compose.ui.draw.scale
        import androidx.compose.ui.graphics.Color
        import androidx.compose.ui.graphics.graphicsLayer
        import androidx.compose.ui.layout.ContentScale
        import androidx.compose.ui.platform.LocalContext
        import androidx.compose.ui.text.font.FontWeight
        import androidx.compose.ui.text.style.TextAlign
        import androidx.compose.ui.text.style.TextOverflow
        import androidx.compose.ui.unit.dp
        import androidx.compose.ui.viewinterop.AndroidView
        import androidx.lifecycle.ViewModel
        import androidx.lifecycle.viewmodel.compose.viewModel
        import androidx.media3.common.*
        import androidx.media3.exoplayer.ExoPlayer
        import androidx.media3.ui.PlayerView
        import androidx.navigation.compose.*
        import coil.compose.AsyncImage
        import coil.request.ImageRequest
        import com.google.accompanist.permissions.ExperimentalPermissionsApi
        import com.google.accompanist.permissions.rememberMultiplePermissionsState
        import kotlinx.coroutines.*
        import kotlinx.coroutines.flow.*

        // Data models
        data class VideoFile(
            val uri: String,
            val name: String,
            val duration: Long = 0,
            val size: Long = 0
        )

        data class PlayerState(
            val isPlaying: Boolean = false,
            val currentVideo: VideoFile? = null
        )

        // Main Activity
        class MainActivity : ComponentActivity() {
            
            private var exoPlayer: ExoPlayer? = null
            
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                
                initializePlayer()
                
                setContent {
                    NYPlayerTheme {
                        NYPlayerApp()
                    }
                }
            }
            
            private fun initializePlayer() {
                exoPlayer = ExoPlayer.Builder(this).build()
            }
            
            override fun onDestroy() {
                super.onDestroy()
                exoPlayer?.release()
            }
        }

        // Main App
        @OptIn(ExperimentalPermissionsApi::class)
        @Composable
        fun NYPlayerApp() {
            val navController = rememberNavController()
            val viewModel: NYPlayerViewModel = viewModel()
            
            val permissionsState = rememberMultiplePermissionsState(
                permissions = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    listOf(Manifest.permission.READ_MEDIA_VIDEO)
                } else {
                    listOf(Manifest.permission.READ_EXTERNAL_STORAGE)
                }
            )
            
            NavHost(navController = navController, startDestination = "splash") {
                composable("splash") { SplashScreen(navController) }
                composable("home") { HomeScreen(navController, viewModel, permissionsState) }
                composable("player") { PlayerScreen(navController, viewModel) }
            }
        }

        // Splash Screen
        @Composable
        fun SplashScreen(navController: androidx.navigation.NavHostController) {
            val scale = remember { Animatable(0f) }
            
            LaunchedEffect(Unit) {
                scale.animateTo(1f, animationSpec = spring())
                delay(2500)
                navController.navigate("home") { popUpTo("splash") { inclusive = true } }
            }
            
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color(0xFF6200EE)),
                contentAlignment = Alignment.Center
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    AsyncImage(
                        model = ImageRequest.Builder(LocalContext.current)
                            .data("https://graph.org/file/3f4620a46dcbb69d218b0-13e5a8d9424946a373.jpg")
                            .build(),
                        contentDescription = "Logo",
                        modifier = Modifier
                            .size(120.dp)
                            .scale(scale.value)
                            .clip(CircleShape),
                        contentScale = ContentScale.Crop
                    )
                    
                    Spacer(modifier = Modifier.height(24.dp))
                    
                    Text(
                        text = "NY PLAYER",
                        style = MaterialTheme.typography.headlineMedium,
                        color = Color.White,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Text(
                        text = "Advanced Video Player",
                        style = MaterialTheme.typography.bodyLarge,
                        color = Color.White.copy(alpha = 0.8f)
                    )
                }
            }
        }

        // Home Screen
        @OptIn(ExperimentalPermissionsApi::class)
        @Composable
        fun HomeScreen(
            navController: androidx.navigation.NavHostController,
            viewModel: NYPlayerViewModel,
            permissionsState: com.google.accompanist.permissions.MultiplePermissionsState
        ) {
            val filePicker = rememberLauncherForActivityResult(
                contract = ActivityResultContracts.OpenDocument()
            ) { uri ->
                uri?.let {
                    viewModel.openFile(it)
                    navController.navigate("player")
                }
            }
            
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
            ) {
                Text(
                    text = "NY Player",
                    style = MaterialTheme.typography.headlineLarge,
                    modifier = Modifier.padding(vertical = 16.dp)
                )
                
                if (!permissionsState.allPermissionsGranted) {
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Icon(Icons.Default.Warning, contentDescription = null, modifier = Modifier.size(48.dp))
                            Spacer(modifier = Modifier.height(16.dp))
                            Text("Storage Permission Required", style = MaterialTheme.typography.titleMedium)
                            Button(
                                onClick = { permissionsState.launchMultiplePermissionRequest() },
                                modifier = Modifier.padding(top = 8.dp)
                            ) {
                                Text("Grant Permission")
                            }
                        }
                    }
                }
                
                Spacer(modifier = Modifier.height(24.dp))
                
                Button(
                    onClick = { filePicker.launch(arrayOf("video/*", "audio/*")) },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(Icons.Default.FolderOpen, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Open Video File")
                }
            }
        }

        // Player Screen
        @Composable
        fun PlayerScreen(
            navController: androidx.navigation.NavHostController,
            viewModel: NYPlayerViewModel
        ) {
            val context = LocalContext.current as MainActivity
            val playerState by viewModel.playerState.collectAsState()
            
            Box(modifier = Modifier.fillMaxSize()) {
                AndroidView(
                    factory = { PlayerView(it).apply { player = context.exoPlayer } },
                    modifier = Modifier.fillMaxSize()
                )
                
                IconButton(
                    onClick = { navController.navigateUp() },
                    modifier = Modifier.padding(16.dp)
                ) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "Back", tint = Color.White)
                }
            }
        }

        // ViewModel
        class NYPlayerViewModel : ViewModel() {
            private val _playerState = MutableStateFlow(PlayerState())
            val playerState: StateFlow<PlayerState> = _playerState.asStateFlow()
            
            fun openFile(uri: Uri) {
                val file = VideoFile(
                    uri = uri.toString(),
                    name = uri.lastPathSegment ?: "Unknown"
                )
                _playerState.value = _playerState.value.copy(currentVideo = file, isPlaying = true)
            }
        }

        // Theme
        @Composable
        fun NYPlayerTheme(content: @Composable () -> Unit) {
            MaterialTheme(
                colorScheme = lightColorScheme(primary = Color(0xFF6200EE)),
                content = content
            )
        }
        EOF

    # Step 13: Build ONLY release APK (no debug)
    - name: Build Release APK
      run: ./gradlew assembleRelease --stacktrace

    # Step 14: Upload release APK
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: ny-player-release
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30

    # Step 15: Show success message
    - name: Build Success
      run: |
        echo "✅ NY Player APK built successfully!"
        echo "📱 Download from Artifacts section above"
        echo "🎬 Install on Android device and enjoy!"
