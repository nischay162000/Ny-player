name: Android Build with Complete App Code

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Create Complete App Structure
      run: |
        # Create directory structure
        mkdir -p app/src/main/java/com/nybots/app/utils
        mkdir -p app/src/main/res/{layout,values,drawable,xml}
        
        # ROOT build.gradle.kts
        cat > build.gradle.kts << 'EOF'
        plugins {
            id("com.android.application") version "8.3.0" apply false
            id("org.jetbrains.kotlin.android") version "1.9.0" apply false
        }
        EOF
        
        # settings.gradle.kts
        cat > settings.gradle.kts << 'EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        rootProject.name = "NY BOTS"
        include(":app")
        EOF
        
        # gradle.properties
        cat > gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        kotlin.code.style=official
        android.nonTransitiveRClass=true
        EOF
        
        # app/build.gradle.kts
        cat > app/build.gradle.kts << 'EOF'
        plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
        }
        android {
            namespace = "com.nybots.app"
            compileSdk = 34
            defaultConfig {
                applicationId = "com.nybots.app"
                minSdk = 24
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"
            }
            buildTypes {
                release {
                    isMinifyEnabled = false
                    proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
                }
            }
            compileOptions {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
        dependencies {
            implementation("androidx.appcompat:appcompat:1.6.1")
            implementation("androidx.constraintlayout:constraintlayout:2.1.4")
            implementation("androidx.core:core-ktx:1.12.0")
            implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
            implementation("com.google.android.material:material:1.11.0")
        }
        EOF
        
        # app/proguard-rules.pro
        cat > app/proguard-rules.pro << 'EOF'
        -keep public class * extends android.app.Activity
        -keep public class * extends android.webkit.WebViewClient
        -keep public class * extends android.webkit.WebChromeClient
        EOF
        
        # AndroidManifest.xml
        cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.VIBRATE" />
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:supportsRtl="true"
                android:theme="@style/Theme.NYBots"
                android:usesCleartextTraffic="true"
                android:hardwareAccelerated="true"
                tools:targetApi="31">
                <activity
                    android:name=".SplashActivity"
                    android:exported="true"
                    android:theme="@style/SplashTheme">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                <activity
                    android:name=".WebViewActivity"
                    android:exported="false" />
            </application>
        </manifest>
        EOF
        
        # AppConfig.kt
        cat > app/src/main/java/com/nybots/app/AppConfig.kt << 'EOF'
        package com.nybots.app
        object AppConfig {
            const val APP_NAME = "NY BOTS"
            const val LOGO_TEXT = "NY BOTS"
            const val LOGO_COLOR = "#00FFEA"
            const val BACKGROUND_COLOR = "#000000"
            const val PRIMARY_COLOR = "#00FFEA"
            const val TARGET_URL = "https://google.com"
            const val SPLASH_DURATION_MS = 2200L
            const val ENABLE_SPLASH_ANIMATION = true
            const val HIDE_WEB_INDICATORS = true
            const val CUSTOM_USER_AGENT = true
            const val PULL_TO_REFRESH = true
            const val HAPTIC_FEEDBACK = true
            const val BLOCK_EXTERNAL_LINKS = true
            
            fun getCustomUserAgent(defaultAgent: String): String {
                return if (CUSTOM_USER_AGENT) {
                    defaultAgent.replace("; wv", "").replace("Version/4.0 ", "")
                } else defaultAgent
            }
        }
        EOF
        
        # SplashActivity.kt
        cat > app/src/main/java/com/nybots/app/SplashActivity.kt << 'EOF'
        package com.nybots.app
        import android.content.Intent
        import android.graphics.Color
        import android.os.Bundle
        import android.os.Handler
        import android.os.Looper
        import android.view.animation.*
        import android.widget.TextView
        import androidx.appcompat.app.AppCompatActivity
        import androidx.constraintlayout.widget.ConstraintLayout
        
        class SplashActivity : AppCompatActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(R.layout.activity_splash)
                setupUI()
                val logoText = findViewById<TextView>(R.id.logoText)
                if (AppConfig.ENABLE_SPLASH_ANIMATION) {
                    startAnimation(logoText)
                } else {
                    logoText.alpha = 1.0f
                }
                Handler(Looper.getMainLooper()).postDelayed({
                    startActivity(Intent(this, WebViewActivity::class.java))
                    finish()
                }, AppConfig.SPLASH_DURATION_MS)
            }
            
            private fun setupUI() {
                val rootLayout = findViewById<ConstraintLayout>(R.id.splashRoot)
                rootLayout.setBackgroundColor(Color.parseColor(AppConfig.BACKGROUND_COLOR))
                val logoText = findViewById<TextView>(R.id.logoText)
                logoText.text = AppConfig.LOGO_TEXT
                logoText.setTextColor(Color.parseColor(AppConfig.LOGO_COLOR))
                logoText.setShadowLayer(20f, 0f, 0f, Color.parseColor(AppConfig.LOGO_COLOR))
            }
            
            private fun startAnimation(logoText: TextView) {
                val animationSet = AnimationSet(true)
                val scaleUp = ScaleAnimation(0.3f, 1.2f, 0.3f, 1.2f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f).apply {
                    duration = 800
                    fillAfter = true
                }
                val fadeIn = AlphaAnimation(0.0f, 1.0f).apply {
                    duration = 800
                    fillAfter = true
                }
                val bounceBack = ScaleAnimation(1.2f, 1.0f, 1.2f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f).apply {
                    duration = 600
                    startOffset = 800
                    interpolator = BounceInterpolator()
                    fillAfter = true
                }
                animationSet.addAnimation(scaleUp)
                animationSet.addAnimation(fadeIn)
                animationSet.addAnimation(bounceBack)
                logoText.startAnimation(animationSet)
            }
        }
        EOF
        
        # WebViewActivity.kt
        cat > app/src/main/java/com/nybots/app/WebViewActivity.kt << 'EOF'
        package com.nybots.app
        import android.annotation.SuppressLint
        import android.content.Intent
        import android.graphics.Bitmap
        import android.net.ConnectivityManager
        import android.net.NetworkCapabilities
        import android.os.Bundle
        import android.view.View
        import android.webkit.*
        import android.widget.ProgressBar
        import androidx.appcompat.app.AppCompatActivity
        import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
        
        class WebViewActivity : AppCompatActivity() {
            private lateinit var webView: WebView
            private lateinit var progressBar: ProgressBar
            private lateinit var swipeRefresh: SwipeRefreshLayout
            
            @SuppressLint("SetJavaScriptEnabled")
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(R.layout.activity_webview)
                
                webView = findViewById(R.id.webView)
                progressBar = findViewById(R.id.progressBar)
                swipeRefresh = findViewById(R.id.swipeRefresh)
                
                setupWebView()
                setupSwipeRefresh()
                
                if (isNetworkAvailable()) {
                    webView.loadUrl(AppConfig.TARGET_URL)
                } else {
                    loadOfflinePage()
                }
            }
            
            private fun setupWebView() {
                webView.webViewClient = object : WebViewClient() {
                    override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
                        super.onPageStarted(view, url, favicon)
                        progressBar.visibility = View.VISIBLE
                    }
                    override fun onPageFinished(view: WebView?, url: String?) {
                        super.onPageFinished(view, url)
                        progressBar.visibility = View.GONE
                        swipeRefresh.isRefreshing = false
                        injectNativeCSS()
                    }
                    override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
                        val url = request?.url?.toString() ?: return false
                        if (AppConfig.BLOCK_EXTERNAL_LINKS && !url.contains(extractDomain(AppConfig.TARGET_URL))) {
                            startActivity(Intent(Intent.ACTION_VIEW, request.url))
                            return true
                        }
                        return false
                    }
                }
                
                webView.webChromeClient = object : WebChromeClient() {
                    override fun onProgressChanged(view: WebView?, newProgress: Int) {
                        progressBar.progress = newProgress
                    }
                }
                
                webView.settings.apply {
                    javaScriptEnabled = true
                    domStorageEnabled = true
                    cacheMode = WebSettings.LOAD_DEFAULT
                    loadWithOverviewMode = true
                    useWideViewPort = true
                    builtInZoomControls = false
                    displayZoomControls = false
                    userAgentString = AppConfig.getCustomUserAgent(userAgentString)
                    allowFileAccess = false
                    allowContentAccess = false
                }
            }
            
            private fun setupSwipeRefresh() {
                if (AppConfig.PULL_TO_REFRESH) {
                    swipeRefresh.setColorSchemeColors(android.graphics.Color.parseColor(AppConfig.PRIMARY_COLOR))
                    swipeRefresh.setOnRefreshListener { webView.reload() }
                } else {
                    swipeRefresh.isEnabled = false
                }
            }
            
            private fun injectNativeCSS() {
                val css = """
                    javascript:(function() {
                        var style = document.createElement('style');
                        style.innerHTML = '* { -webkit-tap-highlight-color: transparent !important; } ::-webkit-scrollbar { width: 0px; background: transparent; } input, textarea, select { border-radius: 12px !important; border: 1px solid #E0E0E0 !important; padding: 12px 16px !important; } button { border-radius: 12px !important; background: ${AppConfig.PRIMARY_COLOR} !important; color: #000000 !important; border: none !important; padding: 12px 24px !important; }';
                        document.head.appendChild(style);
                    })()
                """.trimIndent()
                webView.evaluateJavascript(css, null)
            }
            
            private fun loadOfflinePage() {
                val html = """
                    <!DOCTYPE html><html><head><meta name="viewport" content="width=device-width, initial-scale=1.0"><style>body{font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; text-align: center; padding: 50px; background: ${AppConfig.BACKGROUND_COLOR}; color: ${AppConfig.PRIMARY_COLOR};} .icon{font-size: 64px; margin-bottom: 20px;} .title{font-size: 24px; margin-bottom: 10px;}</style></head><body><div class="icon">📱</div><div class="title">You're Offline</div><div>Check your internet connection and try again</div></body></html>
                """.trimIndent()
                webView.loadDataWithBaseURL(null, html, "text/html", "UTF-8", null)
            }
            
            private fun isNetworkAvailable(): Boolean {
                val connectivityManager = getSystemService(CONNECTIVITY_SERVICE) as ConnectivityManager
                val network = connectivityManager.activeNetwork ?: return false
                val networkCapabilities = connectivityManager.getNetworkCapabilities(network) ?: return false
                return networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
            }
            
            private fun extractDomain(url: String): String {
                return try { android.net.Uri.parse(url).host ?: "" } catch (e: Exception) { "" }
            }
            
            override fun onBackPressed() {
                if (webView.canGoBack()) webView.goBack() else super.onBackPressed()
            }
            
            override fun onPause() {
                super.onPause()
                webView.onPause()
            }
            
            override fun onResume() {
                super.onResume()
                webView.onResume()
            }
            
            override fun onDestroy() {
                webView.destroy()
                super.onDestroy()
            }
        }
        EOF
        
        # NativeUtils.kt
        cat > app/src/main/java/com/nybots/app/utils/NativeUtils.kt << 'EOF'
        package com.nybots.app.utils
        import android.content.Context
        import android.os.Build
        import android.os.VibrationEffect
        import android.os.Vibrator
        
        object NativeUtils {
            fun performHapticFeedback(context: Context) {
                if (!com.nybots.app.AppConfig.HAPTIC_FEEDBACK) return
                val vibrator = context.getSystemService(Context.VIBRATOR_SERVICE) as? Vibrator
                if (vibrator?.hasVibrator() == true) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                        vibrator.vibrate(VibrationEffect.createOneShot(10, VibrationEffect.DEFAULT_AMPLITUDE))
                    } else {
                        vibrator.vibrate(10)
                    }
                }
            }
        }
        EOF

    - name: Create Layout Files
      run: |
        # activity_splash.xml
        cat > app/src/main/res/layout/activity_splash.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:app="http://schemas.android.com/apk/res-auto"
            android:id="@+id/splashRoot"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="@color/black">
            <TextView
                android:id="@+id/logoText"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="NY BOTS"
                android:textColor="@color/aqua"
                android:textSize="48sp"
                android:textStyle="bold"
                android:alpha="0"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintLeft_toLeftOf="parent"
                app:layout_constraintRight_toRightOf="parent"
                app:layout_constraintTop_toTopOf="parent" />
        </androidx.constraintlayout.widget.ConstraintLayout>
        EOF
        
        # activity_webview.xml
        cat > app/src/main/res/layout/activity_webview.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:app="http://schemas.android.com/apk/res-auto"
            android:layout_width="match_parent"
            android:layout_height="match_parent">
            <ProgressBar
                android:id="@+id/progressBar"
                style="@android:style/Widget.ProgressBar.Horizontal"
                android:layout_width="0dp"
                android:layout_height="3dp"
                android:max="100"
                android:visibility="gone"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent" />
            <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
                android:id="@+id/swipeRefresh"
                android:layout_width="0dp"
                android:layout_height="0dp"
                app:layout_constraintTop_toBottomOf="@id/progressBar"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintBottom_toBottomOf="parent">
                <WebView
                    android:id="@+id/webView"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:scrollbars="none" />
            </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
        </androidx.constraintlayout.widget.ConstraintLayout>
        EOF

    - name: Create Resource Files
      run: |
        # colors.xml
        cat > app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="black">#FF000000</color>
            <color name="aqua">#FF00FFEA</color>
            <color name="white">#FFFFFFFF</color>
            <color name="purple_200">#FFBB86FC</color>
            <color name="purple_500">#FF6200EE</color>
            <color name="purple_700">#FF3700B3</color>
            <color name="teal_200">#FF03DAC5</color>
            <color name="teal_700">#FF018786</color>
        </resources>
        EOF
        
        # strings.xml
        cat > app/src/main/res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">NY BOTS</string>
        </resources>
        EOF
        
        # styles.xml
        cat > app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="Theme.NYBots" parent="Theme.AppCompat.DayNight.DarkActionBar">
                <item name="colorPrimary">@color/purple_500</item>
                <item name="colorPrimaryVariant">@color/purple_700</item>
                <item name="colorOnPrimary">@color/white</item>
                <item name="android:statusBarColor">@color/purple_700</item>
            </style>
            <style name="SplashTheme" parent="Theme.AppCompat.NoActionBar">
                <item name="android:windowBackground">@color/black</item>
                <item name="android:statusBarColor">@color/black</item>
                <item name="android:navigationBarColor">@color/black</item>
            </style>
        </resources>
        EOF
        
        # button_rounded.xml
        cat > app/src/main/res/drawable/button_rounded.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
            <solid android:color="#FF00FFEA" />
            <corners android:radius="12dp" />
        </shape>
        EOF

    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Clean and Build
      run: |
        ./gradlew clean
        ./gradlew assembleDebug
        ./gradlew assembleRelease

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 7

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30

    - name: Build Summary
      run: |
        echo "✅ NY BOTS Android App Built Successfully!"
        echo "📱 Features:"
        echo "  - Premium splash screen with animation"
        echo "  - Native-feeling WebView (no one can tell it's web)"
        echo "  - Pull-to-refresh"
        echo "  - Offline support"
        echo "  - Haptic feedback"
        echo "  - Custom user agent"
        echo "  - External link blocking"
        echo "🔧 Configuration:"
        echo "  - Change URL in AppConfig.kt TARGET_URL"
        echo "  - Change app name in AppConfig.kt APP_NAME"
        echo "  - Customize colors and branding"
        echo "📦 APK files uploaded as artifacts!"
