name: Build NY Player Android App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Create project structure
      run: |
        mkdir -p app/src/main/java/com/nyplayer
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/res/xml
        mkdir -p gradle/wrapper
        
    - name: Create gradle-wrapper.properties
      run: |
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        networkTimeout=10000
        validateDistributionUrl=true
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
    - name: Create gradlew scripts
      run: |
        # Download gradle wrapper jar
        mkdir -p gradle/wrapper
        curl -L https://github.com/gradle/gradle/raw/v8.4.0/gradle/wrapper/gradle-wrapper.jar -o gradle/wrapper/gradle-wrapper.jar
        
        # Create gradlew for Unix
        cat > gradlew << 'EOF'
        #!/usr/bin/env sh
        
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        
        # Determine the Java command to use to start the JVM.
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
        else
            JAVACMD="java"
        fi
        
        CLASSPATH="gradle/wrapper/gradle-wrapper.jar"
        
        # Collect all arguments for the java command
        eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=gradlew\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$@"
        
        exec "$JAVACMD" "$@"
        EOF
        chmod +x gradlew
        
    - name: Create settings.gradle.kts
      run: |
        cat > settings.gradle.kts << 'EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        
        rootProject.name = "NY Player"
        include(":app")
        EOF
        
    - name: Create app/build.gradle.kts
      run: |
        cat > app/build.gradle.kts << 'EOF'
        plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
            id("org.jetbrains.kotlin.plugin.compose")
        }
        
        android {
            namespace = "com.nyplayer"
            compileSdk = 34
            
            defaultConfig {
                applicationId = "com.nyplayer"
                minSdk = 24
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"
            }
            
            buildTypes {
                release {
                    isMinifyEnabled = false
                }
            }
            
            compileOptions {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
            
            kotlinOptions {
                jvmTarget = "1.8"
            }
            
            buildFeatures {
                compose = true
            }
        }
        
        dependencies {
            implementation("androidx.core:core-ktx:1.12.0")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
            implementation("androidx.activity:activity-compose:1.8.2")
            implementation(platform("androidx.compose:compose-bom:2023.10.01"))
            implementation("androidx.compose.ui:ui")
            implementation("androidx.compose.ui:ui-tooling-preview")
            implementation("androidx.compose.material3:material3")
            implementation("androidx.compose.material:material-icons-extended")
            
            // Media3 ExoPlayer
            implementation("androidx.media3:media3-exoplayer:1.2.0")
            implementation("androidx.media3:media3-ui:1.2.0")
            
            // Image loading
            implementation("io.coil-kt:coil-compose:2.5.0")
        }
        EOF
        
    - name: Create root build.gradle.kts
      run: |
        cat > build.gradle.kts << 'EOF'
        plugins {
            id("com.android.application") version "8.2.0" apply false
            id("org.jetbrains.kotlin.android") version "1.9.10" apply false
            id("org.jetbrains.kotlin.plugin.compose") version "1.9.10" apply false
        }
        EOF
        
    - name: Create AndroidManifest.xml
      run: |
        cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android">
        
            <uses-permission android:name="android.permission.INTERNET" />
        
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:theme="@style/Theme.NYPlayer">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:theme="@style/Theme.NYPlayer">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF
        
    - name: Create app resources
      run: |
        # Create themes.xml
        cat > app/src/main/res/values/themes.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="Theme.NYPlayer" parent="android:Theme.Material.DayNight.NoActionBar" />
        </resources>
        EOF
        
        # Create strings.xml
        cat > app/src/main/res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">NY Player</string>
        </resources>
        EOF
        
        # Create basic launcher icons
        mkdir -p app/src/main/res/mipmap-anydpi-v26
        cat > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@android:color/system_accent1_600"/>
            <foreground android:drawable="@android:drawable/ic_media_play"/>
        </adaptive-icon>
        EOF
        
        cp app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
        
    - name: Create MainActivity.kt
      run: |
        cat > app/src/main/java/com/nyplayer/MainActivity.kt << 'EOF'
        package com.nyplayer
        
        import android.net.Uri
        import android.os.Bundle
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.setContent
        import androidx.compose.animation.*
        import androidx.compose.animation.core.*
        import androidx.compose.foundation.*
        import androidx.compose.foundation.layout.*
        import androidx.compose.foundation.lazy.grid.GridCells
        import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
        import androidx.compose.foundation.lazy.grid.items
        import androidx.compose.foundation.shape.CircleShape
        import androidx.compose.foundation.shape.RoundedCornerShape
        import androidx.compose.material.icons.Icons
        import androidx.compose.material.icons.filled.*
        import androidx.compose.material3.*
        import androidx.compose.runtime.*
        import androidx.compose.ui.Alignment
        import androidx.compose.ui.Modifier
        import androidx.compose.ui.draw.clip
        import androidx.compose.ui.draw.scale
        import androidx.compose.ui.graphics.Brush
        import androidx.compose.ui.graphics.Color
        import androidx.compose.ui.layout.ContentScale
        import androidx.compose.ui.platform.LocalContext
        import androidx.compose.ui.text.font.FontWeight
        import androidx.compose.ui.text.style.TextAlign
        import androidx.compose.ui.text.style.TextOverflow
        import androidx.compose.ui.unit.dp
        import androidx.compose.ui.viewinterop.AndroidView
        import androidx.media3.common.MediaItem
        import androidx.media3.common.util.UnstableApi
        import androidx.media3.exoplayer.ExoPlayer
        import androidx.media3.ui.PlayerView
        import coil.compose.AsyncImage
        import kotlinx.coroutines.delay
        import java.util.concurrent.TimeUnit
        
        @UnstableApi
        class MainActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContent {
                    NYPlayerApp()
                }
            }
        }
        
        @OptIn(ExperimentalMaterial3Api::class)
        @Composable
        fun NYPlayerApp() {
            var showSplash by remember { mutableStateOf(true) }
            var selectedTab by remember { mutableStateOf(0) }
            var currentVideo by remember { mutableStateOf<VideoFile?>(null) }
            var showPlayer by remember { mutableStateOf(false) }
            
            val sampleVideos = remember {
                listOf(
                    VideoFile(
                        uri = Uri.parse("https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"),
                        title = "Big Buck Bunny",
                        duration = 596000L,
                        thumbnail = "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Big_buck_bunny_poster_big.jpg/220px-Big_buck_bunny_poster_big.jpg"
                    ),
                    VideoFile(
                        uri = Uri.parse("https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"),
                        title = "Elephants Dream",
                        duration = 653000L,
                        thumbnail = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Elephants_Dream_s1_proog.jpg/220px-Elephants_Dream_s1_proog.jpg"
                    )
                )
            }
            
            if (showSplash) {
                SplashScreen(
                    onSplashFinished = { showSplash = false }
                )
            } else if (showPlayer && currentVideo != null) {
                VideoPlayerScreen(
                    video = currentVideo!!,
                    onBack = { showPlayer = false }
                )
            } else {
                MaterialTheme(
                    colorScheme = darkColorScheme()
                ) {
                    Scaffold(
                        topBar = {
                            TopAppBar(
                                title = { Text("NY Player", color = Color.White) },
                                colors = TopAppBarDefaults.topAppBarColors(
                                    containerColor = Color(0xFF1976D2)
                                )
                            )
                        },
                        bottomBar = {
                            NavigationBar {
                                NavigationBarItem(
                                    icon = { Icon(Icons.Default.VideoLibrary, contentDescription = null) },
                                    label = { Text("Library") },
                                    selected = selectedTab == 0,
                                    onClick = { selectedTab = 0 }
                                )
                                NavigationBarItem(
                                    icon = { Icon(Icons.Default.PlaylistPlay, contentDescription = null) },
                                    label = { Text("Playlists") },
                                    selected = selectedTab == 1,
                                    onClick = { selectedTab = 1 }
                                )
                            }
                        }
                    ) { paddingValues ->
                        when (selectedTab) {
                            0 -> LibraryScreen(
                                videos = sampleVideos,
                                onVideoClick = { video ->
                                    currentVideo = video
                                    showPlayer = true
                                },
                                modifier = Modifier.padding(paddingValues)
                            )
                            else -> PlaceholderScreen(
                                title = "Playlists",
                                modifier = Modifier.padding(paddingValues)
                            )
                        }
                    }
                }
            }
        }
        
        @Composable
        fun SplashScreen(onSplashFinished: () -> Unit) {
            val scale = remember { Animatable(0f) }
            val alpha = remember { Animatable(0f) }
            
            LaunchedEffect(Unit) {
                launch {
                    scale.animateTo(1.2f, animationSpec = tween(800))
                    scale.animateTo(1f, animationSpec = tween(200))
                }
                launch {
                    alpha.animateTo(1f, animationSpec = tween(600))
                    delay(2000)
                    alpha.animateTo(0f, animationSpec = tween(400))
                    onSplashFinished()
                }
            }
            
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(
                        Brush.radialGradient(
                            colors = listOf(Color(0xFF1976D2), Color(0xFF0D47A1))
                        )
                    ),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.alpha(alpha.value)
                ) {
                    AsyncImage(
                        model = "https://graph.org/file/3f4620a46dcbb69d218b0-13e5a8d9424946a373.jpg",
                        contentDescription = "NY Player Logo",
                        modifier = Modifier
                            .size(120.dp)
                            .scale(scale.value)
                            .clip(CircleShape),
                        contentScale = ContentScale.Crop
                    )
                    Spacer(modifier = Modifier.height(24.dp))
                    Text(
                        text = "NY Player",
                        style = MaterialTheme.typography.headlineMedium.copy(
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    )
                }
            }
        }
        
        @Composable
        fun LibraryScreen(
            videos: List<VideoFile>,
            onVideoClick: (VideoFile) -> Unit,
            modifier: Modifier = Modifier
        ) {
            LazyVerticalGrid(
                columns = GridCells.Fixed(2),
                modifier = modifier.fillMaxSize(),
                contentPadding = PaddingValues(16.dp),
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(videos) { video ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { onVideoClick(video) },
                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                    ) {
                        Column {
                            Box {
                                AsyncImage(
                                    model = video.thumbnail,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(120.dp),
                                    contentScale = ContentScale.Crop
                                )
                                Icon(
                                    Icons.Default.PlayArrow,
                                    contentDescription = "Play",
                                    modifier = Modifier
                                        .align(Alignment.Center)
                                        .size(48.dp),
                                    tint = Color.White.copy(alpha = 0.8f)
                                )
                            }
                            Column(modifier = Modifier.padding(12.dp)) {
                                Text(
                                    text = video.title,
                                    style = MaterialTheme.typography.bodyMedium,
                                    maxLines = 2,
                                    overflow = TextOverflow.Ellipsis
                                )
                            }
                        }
                    }
                }
            }
        }
        
        @OptIn(ExperimentalMaterial3Api::class)
        @Composable
        fun VideoPlayerScreen(
            video: VideoFile,
            onBack: () -> Unit
        ) {
            val context = LocalContext.current
            
            val exoPlayer = remember {
                ExoPlayer.Builder(context).build().apply {
                    setMediaItem(MediaItem.fromUri(video.uri))
                    prepare()
                    playWhenReady = true
                }
            }
            
            DisposableEffect(Unit) {
                onDispose {
                    exoPlayer.release()
                }
            }
            
            MaterialTheme(colorScheme = darkColorScheme()) {
                Scaffold(
                    topBar = {
                        TopAppBar(
                            title = { Text(video.title, color = Color.White, maxLines = 1, overflow = TextOverflow.Ellipsis) },
                            navigationIcon = {
                                IconButton(onClick = onBack) {
                                    Icon(Icons.Default.ArrowBack, contentDescription = "Back", tint = Color.White)
                                }
                            },
                            colors = TopAppBarDefaults.topAppBarColors(
                                containerColor = Color.Black
                            )
                        )
                    }
                ) { paddingValues ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(paddingValues)
                            .background(Color.Black)
                    ) {
                        AndroidView(
                            factory = { context ->
                                PlayerView(context).apply {
                                    player = exoPlayer
                                    useController = true
                                }
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .aspectRatio(16f / 9f)
                        )
                    }
                }
            }
        }
        
        @Composable
        fun PlaceholderScreen(
            title: String,
            modifier: Modifier = Modifier
        ) {
            Box(
                modifier = modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Icon(
                        Icons.Default.PlaylistPlay,
                        contentDescription = null,
                        modifier = Modifier.size(64.dp),
                        tint = Color(0xFF1976D2)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Text(
                        text = title,
                        style = MaterialTheme.typography.headlineSmall,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
        
        data class VideoFile(
            val uri: Uri,
            val title: String,
            val duration: Long = 0L,
            val thumbnail: String? = null
        )
        EOF
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build release APK
      run: ./gradlew assembleRelease
      
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: ny-player-release-apk
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30
        
    - name: Create GitHub Release
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: NY Player v1.0.${{ github.run_number }}
        body: |
          ## NY Player - Premium Video Player
          
          ### ✨ Features
          - 🎥 ExoPlayer video playback
          - 📱 Modern Material 3 UI
          - 🎬 Animated splash screen
          - 📂 Video library with grid view
          - 🎵 Sample videos included
          - 📺 Full-screen player
          
          Built from commit: `${{ github.sha }}`
        files: |
          app/build/outputs/apk/release/app-release-unsigned.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
